# Copy to .env and fill in values

# Airtable config
AIRTABLE_API_KEY=
AIRTABLE_BASE_ID=
AIRTABLE_TABLE_NAME=Expenses
# Optional: set a table ID (tbl...) or paste the full Airtable URL (UI/API). If AIRTABLE_URL is set, it wins.
AIRTABLE_TABLE_ID=
AIRTABLE_URL=

# Local storage
UPLOAD_DIR=uploads

# Server config
PORT=3000
ALLOWED_ORIGIN=http://localhost:3000
FLASK_DEBUG=0
PUBLIC_BASE_URL=

# Default currency used when a new expense doesn't specify one (USD | CHF | Euro | CAD)
DEFAULT_CURRENCY=Euro

# Exchange rates to CHF for converting incoming expenses to Swiss francs.
# JSON mapping of per-unit CHF rates, e.g.: {"USD":0.90, "EUR":0.96, "CAD":0.66, "CHF":1}
# If unset, sensible defaults are used. Only applied when creating new expenses and when seeding.
FX_RATES_CHF_JSON={"USD":0.90, "EUR":0.96, "CAD":0.66, "CHF":1}

# Report generation: which statuses to include in totals/rows (comma-separated)
# Default shown here includes everything; set to just 'Done' if you only want finalized expenses
REPORT_INCLUDE_STATUSES=Done,In-Progress,Under Review

# OpenAI config
OPENAI_API_KEY=

# SMTP email (Gmail example)
# For Gmail: enable 2FA and create an App Password, then set:
SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
SMTP_USER=your@gmail.com
SMTP_PASS=your_16_char_app_password
EMAIL_FROM=your@gmail.com
EMAIL_TO=recipient1@example.com,recipient2@example.com

# Cloudflare Access SSO
# The server reads the user email from Cloudflare Access:
# - Preferred header: Cf-Access-Authenticated-User-Email
# - Fallbacks: Cf-Access-Jwt-Assertion header or CF_Authorization cookie (JWT)
# No env vars required; ensure your Cloudflare Access policy forwards these to the app.
